import React, { Component } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";

//
//

//
class ObjsScene extends Component {
  componentDidMount() {
    this.sceneSetup();
    this.addCustomSceneObjects();
    this.startAnimationLoop();
  }
  // 1
  sceneSetup = () => {
    //
    // basic scene setup --------------------
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(
      75, // fov = field of view
      window.innerWidth / window.innerHeight, // aspect ratio
      1, // near plane
      1000 // far plane
    );
    this.camera.position.z = 6;
    this.controls = new OrbitControls(this.camera, this.elObj);
    //
    //

    this.renderer = new THREE.WebGLRenderer({
      // set the transparency of the scene, otherwise its black
      alpha: true,
      // will make the edges smooth
      antialias: true,
    });
    this.renderer.shadowMap.enabled = true;
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.elObj.appendChild(this.renderer.domElement); // mount using React ref
    // basic scene setup --------------------
    //
    //
    //
  };
  // 2
  addCustomSceneObjects = () => {
    //
    // Add CUBE
    const cubeGeometry = new THREE.BoxGeometry(4, 4, 4);
    const cubeMaterial = new THREE.MeshLambertMaterial({
      color: 0x156289,
      emissive: 0x072534,
      side: THREE.DoubleSide,
      flatShading: true,
    });
    // you need to add these 2 inside the this.cube() below
    this.cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
    //  cube position
    this.cube.position.x = -2; //left - right - horizontal
    this.cube.position.y = 2; //top - bottom - vertical
    this.cube.position.z = -15; // diagonal

    //
    //
    //
    // related to the light and the shadow
    this.cube.castShadow = true;
    //
    //
    // with this you add the cube to the scene
    this.scene.add(this.cube);

    //
    //--------------------------
    // Add SPHERE
    const sphereGeometry = new THREE.SphereGeometry(2, 32, 32);
    const sphereMaterial = new THREE.MeshLambertMaterial({ color: 0x006bff });
    this.sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
    //  ball position
    this.sphere.position.x = 3; //left - right - horizontal
    this.sphere.position.y = 0; //top - bottom - vertical
    this.sphere.position.z = -15; // diagonal
    //
    //
    // related to the light and the shadow
    this.sphere.castShadow = true;
    //
    // with this you add the cube to the scene
    this.scene.add(this.sphere);
    //
    //
    //
    //
    // Add PLANE
    const planeGeometry = new THREE.PlaneGeometry(30, 50, 50, 50);
    const planeMaterial = new THREE.MeshLambertMaterial({ color: 0xdddddd });
    // var planeMaterial = new THREE.MeshLambertMaterial((color: 0xff0000));
    this.plane = new THREE.Mesh(planeGeometry, planeMaterial);
    //
    // Since the flat ground is added to the front by default, it needs to be rotated
    this.plane.rotation.x = -0.5 * Math.PI;
    this.plane.position.y = -3;

    // *** RECEIVE SHADOW
    // related to the light and the shadow
    this.plane.receiveShadow = true;
    //
    this.scene.add(this.plane);
    //
    //
    //
    //
    //

    // LIGHTS
    this.spotLight = new THREE.SpotLight(0xffffff);
    // spotLight.position.set( 0 , 10 , 0 );  original
    this.spotLight.position.set(2, 20, 6); //x, y , z
    // (2, 32, 32); with this settings the light will be on the front
    this.spotLight.castShadow = true;
    this.scene.add(this.spotLight);

    const lights = [];
    lights[0] = new THREE.PointLight(0xffffff, 1, 0);
    lights[1] = new THREE.PointLight(0xffffff, 1, 0);
    lights[2] = new THREE.PointLight(0xffffff, 1, 0);

    lights[0].position.set(0, 200, 0);
    lights[1].position.set(100, 200, 100);
    lights[2].position.set(-100, -200, -100);

    this.scene.add(lights[0]);
    this.scene.add(lights[1]);
    this.scene.add(lights[2]);
  };

  //
  //
  // 3
  startAnimationLoop = () => {
    this.renderer.render(this.scene, this.camera);
  };
  //
  //

  //
  //
  //
  //
  render() {
    return <div ref={(ref) => (this.elObj = ref)}></div>;
  }
}

export default ObjsScene;
